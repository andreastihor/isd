// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	storage "github.com/andreastihor/isd/isdsvc/backend/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateClub mocks base method.
func (m *MockStorage) CreateClub(ctx context.Context, club *storage.Club) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClub", ctx, club)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClub indicates an expected call of CreateClub.
func (mr *MockStorageMockRecorder) CreateClub(ctx, club interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClub", reflect.TypeOf((*MockStorage)(nil).CreateClub), ctx, club)
}

// DeleteClub mocks base method.
func (m *MockStorage) DeleteClub(ctx context.Context, clubID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClub", ctx, clubID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClub indicates an expected call of DeleteClub.
func (mr *MockStorageMockRecorder) DeleteClub(ctx, clubID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClub", reflect.TypeOf((*MockStorage)(nil).DeleteClub), ctx, clubID)
}

// GetClubs mocks base method.
func (m *MockStorage) GetClubs(ctx context.Context, clubIDs ...string) ([]storage.Club, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range clubIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClubs", varargs...)
	ret0, _ := ret[0].([]storage.Club)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubs indicates an expected call of GetClubs.
func (mr *MockStorageMockRecorder) GetClubs(ctx interface{}, clubIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, clubIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubs", reflect.TypeOf((*MockStorage)(nil).GetClubs), varargs...)
}

// GetDBConn mocks base method.
func (m *MockStorage) GetDBConn() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBConn")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDBConn indicates an expected call of GetDBConn.
func (mr *MockStorageMockRecorder) GetDBConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBConn", reflect.TypeOf((*MockStorage)(nil).GetDBConn))
}

// UpdateClub mocks base method.
func (m *MockStorage) UpdateClub(ctx context.Context, clubID string, club *storage.Club) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClub", ctx, clubID, club)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClub indicates an expected call of UpdateClub.
func (mr *MockStorageMockRecorder) UpdateClub(ctx, clubID, club interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClub", reflect.TypeOf((*MockStorage)(nil).UpdateClub), ctx, clubID, club)
}

// MockClubStore is a mock of ClubStore interface.
type MockClubStore struct {
	ctrl     *gomock.Controller
	recorder *MockClubStoreMockRecorder
}

// MockClubStoreMockRecorder is the mock recorder for MockClubStore.
type MockClubStoreMockRecorder struct {
	mock *MockClubStore
}

// NewMockClubStore creates a new mock instance.
func NewMockClubStore(ctrl *gomock.Controller) *MockClubStore {
	mock := &MockClubStore{ctrl: ctrl}
	mock.recorder = &MockClubStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClubStore) EXPECT() *MockClubStoreMockRecorder {
	return m.recorder
}

// CreateClub mocks base method.
func (m *MockClubStore) CreateClub(ctx context.Context, club *storage.Club) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClub", ctx, club)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClub indicates an expected call of CreateClub.
func (mr *MockClubStoreMockRecorder) CreateClub(ctx, club interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClub", reflect.TypeOf((*MockClubStore)(nil).CreateClub), ctx, club)
}

// DeleteClub mocks base method.
func (m *MockClubStore) DeleteClub(ctx context.Context, clubID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClub", ctx, clubID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClub indicates an expected call of DeleteClub.
func (mr *MockClubStoreMockRecorder) DeleteClub(ctx, clubID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClub", reflect.TypeOf((*MockClubStore)(nil).DeleteClub), ctx, clubID)
}

// GetClubs mocks base method.
func (m *MockClubStore) GetClubs(ctx context.Context, clubIDs ...string) ([]storage.Club, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range clubIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClubs", varargs...)
	ret0, _ := ret[0].([]storage.Club)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubs indicates an expected call of GetClubs.
func (mr *MockClubStoreMockRecorder) GetClubs(ctx interface{}, clubIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, clubIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubs", reflect.TypeOf((*MockClubStore)(nil).GetClubs), varargs...)
}

// UpdateClub mocks base method.
func (m *MockClubStore) UpdateClub(ctx context.Context, clubID string, club *storage.Club) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClub", ctx, clubID, club)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClub indicates an expected call of UpdateClub.
func (mr *MockClubStoreMockRecorder) UpdateClub(ctx, clubID, club interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClub", reflect.TypeOf((*MockClubStore)(nil).UpdateClub), ctx, clubID, club)
}
